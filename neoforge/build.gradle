import org.apache.tools.ant.filters.LineContains

plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.52'
    id 'net.neoforged.gradle.mixin' version '7.0.52'
    id 'java-library'
}
base {
    archivesName = "${archives_base_name}-neoforge"
    version = project.mod_version
    group = project.maven_group
}

mixin {
    config("${mod_id}.mixins.json")
}

jarJar.enable()

configurations {
    libraries {}
    implementation.extendsFrom libraries
}

runs {
    configureEach {
        modSource project.sourceSets.main
        dependencies {
            runtime configuration(project.configurations.libraries)
        }
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven {
        url 'https://maven.willbl.dev/releases/'
    }
    mavenLocal()
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    libraries(jarJar("com.williambl.vampilang:lang:${vampilang_version}")) {
        jarJar.ranged(it, "[${vampilang_version},)")
        transitive(false)
    }
    libraries(jarJar("com.williambl.vampilang:stdlib:${vampilang_version}")) {
        jarJar.ranged(it, "[${vampilang_version},)")
        transitive(false)
    }

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources

    filesMatching("*.mixins.json") {
        filter(LineContains, negate: true, contains: [ 'refmap' ] )
    }
}

tasks.named('jarJar').configure {
    archiveClassifier = ""
}

tasks.named('build').configure {
    dependsOn('jarJar')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }

    repositories {
        maven {
            name = "willBlRepositoryReleases"
            url = "https://maven.willbl.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
        mavenLocal()
    }
}